{"version":3,"sources":["images/dark-blue-red-filtered.jpg","styles/colors.js","styles/GlobalStyles.js","components/Main/UploadForm.js","components/Main/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyles","createGlobalStyle","colors","heroImg","StyledForm","styled","div","UploadForm","useState","data","loading","error","uploadResult","setUploadResult","file","setFile","fileRef","useRef","onSubmit","e","preventDefault","FormData","append","axios","post","then","res","catch","err","console","log","response","status","message","className","type","ref","onChange","vcfFile","target","files","undefined","name","onClick","current","click","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,oD,mKCC5B,EACA,UADA,EAEE,UAFF,EAGI,UAHJ,EAIA,mB,2uCCAf,IAsDeC,EAtDMC,4BAAH,IAIDC,EAkCAC,K,+tCCtCjB,IAAMC,EAAaC,UAAOC,IAAV,IACQJ,EAWPA,EAgBSA,EASAA,EAQLA,GA0ENK,MAnEf,WAAuB,IAAD,EACsBC,mBAAS,CAAEC,KAAM,KAAMC,SAAS,EAAOC,MAAO,OADpE,mBACXC,EADW,KACGC,EADH,OAEML,mBAAS,MAFf,mBAEXM,EAFW,KAELC,EAFK,KAGZC,EAAUC,iBAAO,MAEjBC,EAAW,SAACC,GAEd,GADAA,EAAEC,iBACEN,EAAM,CACND,EAAgB,CAAEJ,KAAM,KAAMC,SAAS,EAAMC,MAAO,OACpD,IAAMF,EAAO,IAAIY,SACjBZ,EAAKa,OAAO,OAAQR,GACpBS,IAAMC,KAAK,cAAef,EAAM,IAC3BgB,MAAK,SAACC,GAEHb,EAAgB,CAAEJ,KAAM,KAAMC,SAAS,EAAOC,MAAO,UAExDgB,OAAM,SAACC,GAEJ,GADAC,QAAQC,IAAIF,EAAIG,UACY,MAAxBH,EAAIG,SAASC,OAAgB,CAAC,IACtBC,EAAYL,EAAIG,SAAStB,KAAzBwB,QACRpB,EAAgB,CAAEJ,KAAM,KAAMC,SAAS,EAAOC,MAAOsB,SAErDpB,EAAgB,CAAEJ,KAAM,KAAMC,SAAS,EAAOC,MAAO,8BAqBzE,OACI,kBAACP,EAAD,KAEI,0BAAM8B,UAAU,cAAchB,SAAUA,GACpC,2BACIiB,KAAK,OACLC,IAAKpB,EACLkB,UAAU,QACVG,SAtBC,SAAClB,GACd,IAAMmB,EAAUnB,EAAEoB,OAAOC,MAAM,QAGfC,IAAZH,GACAvB,EAAQuB,IAkBAI,KAAM5B,IAEV,4BAAQqB,KAAK,SAASD,UAAU,cAAcS,QAfnC,WACnB3B,EAAQ4B,QAAQC,UAcR,iBACA,yBAAKX,UAAU,iBACD,OAATpB,QAA0B2B,IAAT3B,EAAqB,iBAAmBA,EAAK4B,MAEnE,4BAAQP,KAAK,SAASjB,SAAUA,GAAhC,WAEHN,EAAaD,MAAQ,uBAAGuB,UAAU,SAAStB,EAAaD,OAAa,OCxGnEmC,MATf,WACI,OACI,0BAAMZ,UAAU,aACZ,qCACA,kBAAC,EAAD,QCUGa,MAXf,WACI,OACI,yBAAKb,UAAU,OACX,kBAAC,YAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCDQc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.b6e58bd5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dark-blue-red-filtered.f7c399dd.jpg\";","\nexport default {\n    pink_main: '#daf4fd',\n    darkblue_bg: '#0d4386',\n    darkblue_text: '#052f63',\n    red_error: 'rgb(167, 45, 79)',\n};\n","import { createGlobalStyle } from 'styled-components';\nimport colors from './colors';\n// import heroImg from '../images/cells-blue.jpg';\nimport heroImg from '../images/dark-blue-red-filtered.jpg';\n\nconst GlobalStyles = createGlobalStyle`\n  \n    h1 {\n        margin: 0;\n        color: ${colors.pink_main};\n        text-align:left;\n        font-size: calc(5vw + 5em);\n        letter-spacing: 3px;\n        font-family: 'Sen', sans-serif;\n        font-weight: 400;\n        font-size: calc(5vw + 8em);\n    }\n    main {\n        width: 80%;\n        margin: 0 auto;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        min-height: 50%;\n        // background:rgb(0,0,0,0.5);\n    }\n    .App {\n        width: 100%;\n    }\n    .top-nav {\n        h1 {\n            text-align: left;\n        }\n    }\n    #root {\n        width: 100vw;\n        min-height: 100vh;\n        display: flex;\n        background: linear-gradient(\n        to right,\n        rgba(0, 0, 0, 0), \n        rgba(0, 0, 0, 0)\n        ),url('${heroImg}');\n        background-size: cover;\n        background-attachment: fixed;\n        background-position: center;\n        flex-wrap: wrap;\n        justify-content: center;\n        align-items: center;\n        display: flex;\n        z-index: 0\n        .main-wrapper {\n        overflow-x:hidden;\n        }\n    }\n}\n`;\n\nexport default GlobalStyles;\n","import React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\n\nconst StyledForm = styled.div`\n    background-color: ${colors.pink_main};\n    border-radius: 25px;\n    width: 50%;\n    height: 100%;\n    margin: 50px 0px 80px 0px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    .error {\n        color: ${colors.red_error};\n        font-weight: 700;\n    }\n\n    .main-submit {\n        width: 100%;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        font-family: 'Open Sans', sans-serif;\n        font-size: calc(0.5vw + 0.5em);\n        \n        .input {\n            display:none;\n        }\n        button {\n            background: ${colors.darkblue_bg};\n            color: white;\n            border: none;\n            cursor: pointer;\n            padding: 8px 10px;\n            border-radius:10px;\n            font-weight: 600;\n        }\n        .choose-file {\n            background: ${colors.darkblue_bg};\n            color: white;\n            cursor: pointer;\n            padding: 8px 10px;\n            border-radius:10px;\n            font-weight: 600;\n        }\n        .file-uploaded {\n            color: ${colors.darkblue_text};\n            font-size: calc(0.5vw + 0.6em);\n        }\n    }\n`;\n\n\nfunction UploadForm() {\n    const [uploadResult, setUploadResult] = useState({ data: null, loading: false, error: null });\n    const [file, setFile] = useState(null);\n    const fileRef = useRef(null);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        if (file) {\n            setUploadResult({ data: null, loading: true, error: null });\n            const data = new FormData();\n            data.append('file', file);\n            axios.post('/api/upload', data, {})\n                .then((res) => {\n                    // console.log(res.statusText);\n                    setUploadResult({ data: null, loading: false, error: null });\n                })\n                .catch((err) => {\n                    console.log(err.response);\n                    if (err.response.status === 400) {\n                        const { message } = err.response.data;\n                        setUploadResult({ data: null, loading: false, error: message });\n                    } else {\n                        setUploadResult({ data: null, loading: false, error: 'Something went wrong' });\n                    }\n                });\n        }\n    };\n\n    // when input changes\n    const onChange = (e) => {\n        const vcfFile = e.target.files[0];\n\n        // cancelled\n        if (vcfFile !== undefined) {\n            setFile(vcfFile);\n        }\n    };\n\n    // for styling the file input\n    const openFileOption = () => {\n        fileRef.current.click();\n    };\n\n    return (\n        <StyledForm>\n\n            <form className=\"main-submit\" onSubmit={onSubmit}>\n                <input\n                    type=\"file\"\n                    ref={fileRef}\n                    className=\"input\"\n                    onChange={onChange}\n                    name={file}\n                />\n                <button type=\"button\" className=\"choose-file\" onClick={openFileOption}>Choose a File</button>\n                <div className=\"file-uploaded\">\n                    {file === null || file === undefined ? 'No file chosen' : file.name}\n                </div>\n                <button type=\"submit\" onSubmit={onSubmit}>Upload</button>\n            </form>\n            {uploadResult.error ? <p className=\"error\">{uploadResult.error}</p> : null }\n        </StyledForm>\n\n\n    );\n}\n\nexport default UploadForm;\n","import React from 'react';\n\nimport UploadForm from './UploadForm';\n\nfunction Home() {\n    return (\n        <main className=\"home-form\">\n            <h1>CCLid</h1>\n            <UploadForm />\n        </main>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Normalize } from 'styled-normalize';\nimport GlobalStyles from './styles/GlobalStyles';\n\nimport Home from './components/Main/Home';\nimport TopNav from './components/TopNav/TopNav';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Normalize />\n            <GlobalStyles />\n            {/* <TopNav /> */}\n            <Home />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}